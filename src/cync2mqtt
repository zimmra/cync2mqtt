#!/usr/bin/env python3
from collections import namedtuple
from amqtt.client import MQTTClient
from amqtt.mqtt.constants import QOS_0, QOS_1, QOS_2
from signal import SIGINT, SIGTERM,signal
import os,sys
import json
import asyncio
import logging
from acync import acync
import argparse
from multiprocessing import Process, Value
import time
from pathlib import Path
import yaml
import math

class cync2mqtt(object):
    async def pub_worker(self,pubqueue):        
        while True:
            (asyncobj,devicestatus) = await pubqueue.get()
            #TODO - add somesort of timestamp her to toss out messages that are too old
            
            powerstatus="ON" if devicestatus.brightness>0 else "OFF"
            devicename=f'{devicestatus.name}/{devicestatus.id}'
            device=asyncobj.devices[devicename]
            if device.is_plug:
                self.log.debug(f"pub_worker mqtt publish: {self.topic}/status/{devicename}  {powerstatus}")
                try:
                    message = await self.mqtt.publish(f'{self.topic}/status/{devicename}',powerstatus.encode(),qos=QOS_0)
                except:
                    self.log.error("Unable to publish mqtt message... skipped")

            else:
                devicestate={
                    "brightness": devicestatus.brightness,
                    "state" : powerstatus
                }
                if device.supports_rgb:
                    devicestate['color_mode']='rgb'
                    devicestate['color'] = {
                        'r' : devicestatus.red,
                        'g' : devicestatus.green,
                        'b' : devicestatus.blue
                    }
                if device.supports_temperature:
                    devicestate['color_temp']=math.floor((((devicestatus.color_temp)-1)/(100-1)*(500-153)-153)*-1)

                self.log.debug(f"pub_worker  mqtt publish: {self.topic}/status/{devicename}  "+json.dumps(devicestate))
                try:
                    message = await self.mqtt.publish(f'{self.topic}/status/{devicename}',json.dumps(devicestate).encode(),qos=QOS_0)
                except:
                    self.log.error("Unable to publish mqtt message... skipped")

                #,json.dumps(devicestatus._asdict()).encode(), qos=QOS_0)

            # Notify the queue that the "work item" has been processed.
            pubqueue.task_done()

    async def homeassistant_discovery(self):
        self.log.debug("Doing homeassistant_discovery")
        for devicename,device in self.meshnetworks.devices.items():
            if device.is_plug:
                switchconfig={
                    "name" : device.name,
                    "command_topic" : self.topic+"/set/"+devicename, 
                    "state_topic" : self.topic+"/status/"+devicename,
                    "avty_t" :  self.topic+"/availability/"+devicename,
                    "pl_avail": "online",
                    "pl_not_avail" : "offline",
                    "unique_id" : device.mac
                }
                self.log.debug(f"mqtt publish: {self.ha_topic}/switch/{devicename}/config  "+json.dumps(switchconfig))
                try:
                    message = await self.mqtt.publish(f'{self.ha_topic}/switch/{devicename}/config',json.dumps(switchconfig).encode(),qos=QOS_1)
                except:
                    self.log.error("Unable to publish mqtt message... skipped")

            else:
                lightconfig={
                    "name" : device.name,
                    "command_topic" : self.topic+"/set/"+devicename, 
                    "state_topic" : self.topic+"/status/"+devicename,
                    "avty_t":  self.topic+"/availability/"+devicename,
                    "pl_avail" : "online",
                    "pl_not_avail" : "offline",
                    "unique_id" : device.mac,
                    "schema": "json",
                    "brightness": True,
                    "brightness_scale" : 100
                }
                if device.supports_temperature or device.supports_rgb:
                    lightconfig['color_mode']=True
                    lightconfig['supported_color_modes']=[]
                    if device.supports_temperature:
                        lightconfig['supported_color_modes'].append('color_temp')
                    if device.supports_rgb:
                        lightconfig['supported_color_modes'].append('rgb')

                self.log.debug(f"mqtt publish: {self.ha_topic}/light/{devicename}/config  "+json.dumps(lightconfig))
                try:                    
                    message = await self.mqtt.publish(f'{self.ha_topic}/light/{devicename}/config',json.dumps(lightconfig).encode(),qos=QOS_1)
                except:
                    self.log.error("Unable to publish mqtt message... skipped")

    async def publish_devices(self):
        self.log.debug("publish_devices:")
        for devicename,device in self.meshnetworks.devices.items():
            deviceconfig={'name' : device.name, 
                          'id' : device.id,
                          'mac' : device.mac,
                          'is_plug' : device.is_plug,
                          'supports_rgb' : device.supports_rgb,
                          'supports_temperature' : device.supports_temperature,
                          'online' : device.online,
                          'brightness' : device.brightness,
                          'red' : device.red,
                          'green' : device.green,
                          'blue' : device.blue,
                          'color_temp' : math.floor((((device.color_temp)-1)/(100-1)*(153-500)-153)*-1)}
            try:
                self.log.debug(f"mqtt publish: {self.ha_topic}/devices/{devicename}  "+json.dumps(deviceconfig)) 
                message = await self.mqtt.publish(f'{self.ha_topic}/devices/{devicename}',json.dumps(deviceconfig).encode(),qos=QOS_1)
            except:
                self.log.error("Unable to publish mqtt message... skipped")
                        
    async def sub_worker(self,subqueue):
        while True:
            message = await subqueue.get()

            if message is None: continue

            try:
                packet = message.publish_packet
            except:
                continue

            self.log.debug("sub_worker: %s => %s" % (packet.variable_header.topic_name, str(packet.payload.data)))
            topic=packet.variable_header.topic_name.split('/')
            if len(topic)==4:
                if topic[1]=='set':
                    devicename="/".join(topic[2:4])
                    device=self.meshnetworks.devices[devicename]
                    if packet.payload.data.startswith(b'{'):
                        try:
                            jsondata=json.loads(packet.payload.data)
                        except:
                            self.log.error("bad json message: {jsondata}")
                            continue
                        #print(jsondata)
                        if 'state' in jsondata and ('brightness' not in jsondata or device.brightness<1):
                            if jsondata['state'].upper()=="ON":
                                await device.set_power(True)
                            else:
                                await device.set_power(False)
                        if 'brightness' in jsondata:
                            await device.set_brightness(int(jsondata['brightness']))
                        if 'color_temp' in jsondata:
                            await device.set_temperature(int(jsondata['color_temp']))
                        if 'color' in jsondata:
                            color=[]
                            for rgb in ('r','g','b'):
                                if rgb in jsondata['color']:
                                    color.append(int(jsondata['color'][rgb]))
                                else:
                                    color.append(0)
                            await device.set_rgb(*color)
                    elif packet.payload.data.upper()==b"ON":
                        await device.set_power(True)
                    elif packet.payload.data.upper()==b"OFF":
                        await device.set_power(False)
                # make sure next commmand doesn't come too fast
                await asyncio.sleep(0.1)
            elif len(topic)==2:
                if topic[1]=='shutdown':
                    self.log.info("Shutdown requested")
                    os.kill(os.getpid(), SIGTERM)
                elif topic[1]=='devices' and packet.payload.data.lower()==b'get':
                    await self.publish_devices()
                elif topic[0]==self.ha_topic and topic[1]=="status" and packet.payload.data.upper()==b"ONLINE":
                    await self.homeassistant_discovery()
                    await asyncio.sleep(1)

                    for device in self.meshnetworks.devices.values():
                        device.online=False

                    for network in self.meshnetworks.networks.values():
                        await network.update_status()

                    # Wait a reasonable amount of time for device nodes to report status through the mesh
                    await asyncio.sleep(0.2*len(self.meshnetworks.devices.keys()))
                    for devicename,device in self.meshnetworks.devices.items():
                        availability=b"online" if device.online else b"offline"
                        message = await self.mqtt.publish(f'{self.topic}/availability/{devicename}',availability,qos=QOS_0)

            # Notify the queue that the "work item" has been processed.
            subqueue.task_done()
        return True

    async def status_worker(self):
        while True:
            for device in self.meshnetworks.devices.values():
                device.online=False
            for network in self.meshnetworks.networks.values():
                count=0
                while not await network.update_status():
                    for devicename,device in network.devices.items():
                        availability=b"offline"
                        self.log.debug(f"status_worker  mqtt publish: {self.topic}/availability/{devicename}  {availability}")
                        try:
                            message = await self.mqtt.publish(f'{self.topic}/availability/{devicename}',availability,qos=QOS_0)
                        except:
                            self.log.info("MQTT fail- attempt shutdown!")
                            os.kill(os.getpid(), SIGINT)
                    if (count>3):
                        # Take drastic action
                        self.log.info("Communication timeout- attempt shutdown!")
                        os.kill(os.getpid(), SIGINT)

                    self.log.info("Status update failed!  - waiting two minutes to try again")

                    # Wait 2 minutes and try again
                    await asyncio.sleep(120)
                    count+=1
                    self.log.info("Retry status update")

            # Wait a reasonable amount of time for device nodes to report status through the mesh
            await asyncio.sleep(0.2*len(self.meshnetworks.devices.keys()))

            for devicename,device in self.meshnetworks.devices.items():
                availability=b"online" if device.online else b"offline"
                self.log.debug(f"status_worker  mqtt publish: {self.topic}/availability/{devicename}  {availability}")
                message = await self.mqtt.publish(f'{self.topic}/availability/{devicename}',availability,qos=QOS_0)
            if self.watchtime is not None:
                self.watchtime.value=int(time.time())
            await asyncio.sleep(300)

    async def run_mqtt(self):
        try:
            #self.mqtt = MQTTClient(config={'reconnect_retries':-1, 'reconnect_max_interval': 60})
            self.mqtt = MQTTClient(config={'reconnect_retries':0, 'auto_reconnect': False})
            ret = await self.mqtt.connect(self.mqtt_url)
        except Exception as ce:
            self.log.error("MQTT Connection failed: %s" % ce)
            #raise Exception("MQTT Connection failed: %s" % ce)
            try:
                await self.mqtt.disconnect()
            except:
                pass
            self.log.error("Will attempt reconnect in 10 minutes")
            return

        pubqueue = asyncio.Queue()
        subqueue = asyncio.Queue()  
#        self.meshnetworks=acync(self.cloudjson,log=self.log,callback=lambda asyncobj,devicestatus,q=pubqueue: q.put_nowait((asyncobj,devicestatus)))
        async def callback_routine(asyncobj,devicestatus):
            pubqueue.put_nowait((asyncobj,devicestatus))
        self.meshnetworks=acync(log=self.log,callback=callback_routine)
        self.meshnetworks.populate_from_configdict(self.configdict)
        # anounce to homeassistant discovery
        await self.homeassistant_discovery()

        # seed everything offline
        for devicename,device in self.meshnetworks.devices.items():
            availability=b"offline"
            message = await self.mqtt.publish(f'{self.topic}/availability/{devicename}',availability,qos=QOS_0)

        meshnetworknames=await self.meshnetworks.connect()
        if len(meshnetworknames)>0:
            self.log.info("Connected to network(s): "+",".join(meshnetworknames))
        else:
            self.log.error("No mesh network connections!")
            try:
                await self.mqtt.disconnect()
            except:
                pass
            return

        tasks = []
        tasks.append(asyncio.create_task(self.pub_worker(pubqueue)))
        subtask=asyncio.create_task(self.sub_worker(subqueue))
        tasks.append(subtask)
        tasks.append(asyncio.create_task(self.status_worker()))

        # add signal handler to catch when it's time to shutdown
        loop = asyncio.get_running_loop()
        main_task = asyncio.current_task()
        for signal in [SIGINT, SIGTERM]:
            loop.add_signal_handler(signal, main_task.cancel)

        await self.mqtt.subscribe([(f'{self.topic}/set/#', QOS_1),(f'{self.topic}/devices',QOS_1),(f'{self.topic}/shutdown',QOS_1),(f'{self.ha_topic}/status',QOS_1)])
        try:
            while True:
                message = await self.mqtt.deliver_message()
                if message:
                    subqueue.put_nowait(message)
        except asyncio.CancelledError:
            self.log.info("Termination signal received")
        except Exception as ce:
            self.log.error("Client exception: %s" % ce)

        self.log.info("Shutting down")
        try:
            await self.mqtt.unsubscribe([f'{self.topic}/set/#',f'{self.topic}/devices',f'{self.topic}/shutdown',f'{self.ha_topic}/status'])
            await self.mqtt.disconnect()
        except:
            pass

        # Wait until the queue is fully processed.
        await pubqueue.join()
        await subqueue.join()

        # shutdown meshnetworks
        await self.meshnetworks.disconnect()

        # Cancel our worker tasks.
        for task in tasks:
            task.cancel()
        # Wait until all worker tasks are cancelled.
        await asyncio.gather(*tasks, return_exceptions=True)
    
    def __init__(self,configdict,**kwargs):
        self.mqtt_url=configdict['mqtt_url']
        self.configdict=configdict
        self.meshnetworks=None
        self.ha_topic = configdict['ha_mqtt_topic'] if 'ha_mqtt_topic' in configdict else 'homeassistant'
        self.topic = configdict['mqtt_topic'] if 'mqtt_topic' in configdict else 'acyncmqtt'
        self.watchtime = kwargs.get('watchtime',None)
        self.log = kwargs.get('log',logging.getLogger("cync2mqtt"))


def run_in_subprocess(args,watchtime,log):
    with Path(args.configyaml).open("rt") as fp:
        configdict=yaml.safe_load(fp)

    for quickcheck in ('mqtt_url','meshconfig'):
        if quickcheck not in configdict:
            log.error("YAML config must at least define mqtt_url and meshconfig!")
            return -1

    loop = asyncio.get_event_loop()
    if args.log_level.upper()=='DEBUG':
        loop.set_debug(True)
    cm=cync2mqtt(configdict,watchtime=watchtime,log=log)
    asyncio.run(cm.run_mqtt())

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("configyaml",help="YAML config file")
    parser.add_argument("--log-level",default='INFO',help='set log level')
    args = parser.parse_args()

    log=logging.getLogger("cync2mqtt")
    logfmt= logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    numeric_level = getattr(logging, args.log_level.upper(), None)
    if not isinstance(numeric_level, int):
        raise ValueError('Invalid log level: %s' % args.log_level)

    log.setLevel(numeric_level)
    h = logging.StreamHandler(sys.stdout)
    h.setLevel(numeric_level)
    h.setFormatter(logfmt)
    log.addHandler(h)

    while True:
        watchtime=Value('Q',int(time.time()))
        p = Process(target=run_in_subprocess, args=(args, watchtime,log))
        p.start()

        def main_handler(signum, frame):
            log.info(f'Signal handler called with signal: {signum}')
            log.info("Trying clean shutdown")
            os.kill(p.pid, SIGINT)
            p.join(30)
            if p.exitcode is None:
                p.kill()
            sys.exit()

        signal(SIGTERM, main_handler)
        signal(SIGINT, main_handler)

        while True:
            time.sleep(60)
            if int(time.time())>watchtime.value+600 or p.exitcode is not None:
                break

        if p.exitcode is None:
            log.error("Notify timeout - attempt restart!")
            # Send signal
            os.kill(p.pid, SIGINT)
        elif p.exitcode==-1:
            break
        p.join(30)
        if p.exitcode is None:
            p.kill()

        sleeptime=watchtime.value+600-int(time.time())
        if sleeptime<10: sleeptime=10
        log.info(f"Will attempt reconnect in {sleeptime} seconds")
        time.sleep(sleeptime)
        log.info("Restarting!")

if __name__ == "__main__":
    main()